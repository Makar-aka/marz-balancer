import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, List, Set
import redis.asyncio as redis
import aiohttp

from config import (
    TELEGRAM_ENABLED, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID,
    NODE_REMINDER_INTERVAL, REDIS_URL
)

# Redis client
redis_client = None
first_run = True

async def init_redis():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis-–∫–ª–∏–µ–Ω—Ç–∞"""
    global redis_client
    if REDIS_URL:
        try:
            redis_client = await redis.from_url(REDIS_URL)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    return False

async def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    if not TELEGRAM_ENABLED or not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    try:
        async with aiohttp.ClientSession() as session:
            api_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            payload = {
                "chat_id": TELEGRAM_CHAT_ID,
                "text": message,
                "parse_mode": "HTML"
            }
            async with session.post(api_url, json=payload) as response:
                return await response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

async def get_node_status_from_redis(node_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã –∏–∑ Redis"""
    if not redis_client:
        return None
    try:
        status = await redis_client.get(f"node:{node_id}:status")
        return status.decode('utf-8') if status else None
    except Exception:
        return None

async def save_node_status_to_redis(node_id, status):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã –≤ Redis"""
    if not redis_client:
        return
    try:
        await redis_client.set(f"node:{node_id}:status", status)
    except Exception:
        pass

async def set_node_last_notified(node_id):
    """–ó–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–¥–µ"""
    if not redis_client:
        return
    try:
        current_time = datetime.utcnow().timestamp()
        await redis_client.set(f"node:{node_id}:last_notified", str(current_time))
    except Exception:
        pass

async def get_node_last_notified(node_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–¥–µ"""
    if not redis_client:
        return None
    try:
        result = await redis_client.get(f"node:{node_id}:last_notified")
        return float(result) if result else None
    except Exception:
        return None

async def set_node_down_time(node_id):
    """–ó–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω–æ–¥–∞ —Å—Ç–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
    if not redis_client:
        return
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –ª–∏ —É–∂–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if not await redis_client.exists(f"node:{node_id}:down_time"):
            current_time = datetime.utcnow().timestamp()
            await redis_client.set(f"node:{node_id}:down_time", str(current_time))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")

async def get_node_down_time(node_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω–æ–¥–∞ —Å—Ç–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
    if not redis_client:
        return None
    try:
        result = await redis_client.get(f"node:{node_id}:down_time")
        return float(result) if result else None
    except Exception:
        return None

async def clear_node_down_time(node_id):
    """–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–¥—ã (–∫–æ–≥–¥–∞ –æ–Ω–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)"""
    if not redis_client:
        return
    try:
        await redis_client.delete(f"node:{node_id}:down_time")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")

def format_downtime(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
    if seconds < 60:
        return f"{int(seconds)} —Å–µ–∫"
    
    minutes = seconds / 60
    if minutes < 60:
        return f"{int(minutes)} –º–∏–Ω"
    
    hours = minutes / 60
    if hours < 24:
        return f"{hours:.1f} —á"
    
    days = hours / 24
    return f"{days:.1f} –¥"

async def save_node_ids_to_redis(node_ids):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ ID –Ω–æ–¥ –≤ Redis"""
    if not redis_client:
        return
    try:
        await redis_client.delete("marzban:node_ids")
        if node_ids:
            await redis_client.sadd("marzban:node_ids", *node_ids)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID –Ω–æ–¥ –≤ Redis: {e}")

async def get_node_ids_from_redis():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –Ω–æ–¥ –∏–∑ Redis"""
    if not redis_client:
        return set()
    try:
        node_ids = await redis_client.smembers("marzban:node_ids")
        return {node_id.decode('utf-8') for node_id in node_ids} if node_ids else set()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –Ω–æ–¥ –∏–∑ Redis: {e}")
        return set()

async def check_nodes_changes(nodes):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥"""
    current_node_ids = {str(n.get("id")) for n in nodes if n.get("id") is not None}
    previous_node_ids = await get_node_ids_from_redis()
    
    if not previous_node_ids:
        await save_node_ids_to_redis(current_node_ids)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–¥—ã
    new_nodes = current_node_ids - previous_node_ids
    for node_id in new_nodes:
        node = next((n for n in nodes if str(n.get("id")) == node_id), None)
        if node:
            node_name = node.get("name") or node.get("address") or f"Node {node_id}"
            message = f"üÜï <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –Ω–æ–¥–∞:</b> {node_name}"
            await send_telegram_message(message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã
    removed_nodes = previous_node_ids - current_node_ids
    if removed_nodes:
        message = f"‚ùå <b>–£–¥–∞–ª–µ–Ω–æ –Ω–æ–¥:</b> {len(removed_nodes)}"
        if len(removed_nodes) <= 5:  # –ï—Å–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö ID
            message += "\nID —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –Ω–æ–¥: " + ", ".join(removed_nodes)
        await send_telegram_message(message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–æ–¥
    if new_nodes or removed_nodes:
        await save_node_ids_to_redis(current_node_ids)

async def send_startup_notification(nodes):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    online_nodes = sum(1 for n in nodes if n.get("status") == "connected")
    total_nodes = len(nodes)
    
    message = f"üöÄ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Marzban –∑–∞–ø—É—â–µ–Ω</b>\n\n"
    message += f"–í—Å–µ–≥–æ –Ω–æ–¥: {total_nodes}\n"
    message += f"–û–Ω–ª–∞–π–Ω –Ω–æ–¥: {online_nodes}\n"
    
    if total_nodes > 0:
        offline_nodes = [n.get("name") or n.get("address") or f"Node {n.get('id')}" 
                         for n in nodes if n.get("status") != "connected"]
        if offline_nodes:
            message += f"\n–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã ({len(offline_nodes)}):\n"
            message += "\n".join([f"- {name}" for name in offline_nodes[:5]])
            if len(offline_nodes) > 5:
                message += f"\n...–∏ –µ—â—ë {len(offline_nodes) - 5}"
    
    await send_telegram_message(message)

async def check_node_status_changes(nodes):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    for node in nodes:
        node_id = node.get("id")
        if not node_id:
            continue
            
        current_status = node.get("status")
        previous_status = await get_node_status_from_redis(node_id)
        
        if previous_status is not None and previous_status != current_status:
            node_name = node.get("name") or node.get("address") or f"Node {node_id}"
            
            if current_status != "connected" and previous_status == "connected":
                # –ù–æ–¥–∞ —Å—Ç–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
                await set_node_down_time(node_id)
                message = f"‚ö†Ô∏è <b>–ù–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:</b> {node_name}\n"
                message += f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}"
                await send_telegram_message(message)
                await set_node_last_notified(node_id)
                
            elif current_status == "connected" and previous_status != "connected":
                # –ù–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –±—ã–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                down_time = await get_node_down_time(node_id)
                message = f"‚úÖ <b>–ù–æ–¥–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞:</b> {node_name}"
                
                if down_time:
                    current_time = datetime.utcnow().timestamp()
                    downtime_seconds = current_time - down_time
                    formatted_downtime = format_downtime(downtime_seconds)
                    message += f"\n–í—Ä–µ–º—è –æ—Ç–≤–∞–ª–∞: {formatted_downtime}"
                
                await send_telegram_message(message)
                
                # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                await clear_node_down_time(node_id)
                
        await save_node_status_to_redis(node_id, current_status)

async def check_offline_nodes_reminders(nodes):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–æ–¥–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–≥–æ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏"""
    current_time = datetime.utcnow().timestamp()
    # –¢–µ–ø–µ—Ä—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –≤–º–µ—Å—Ç–æ —á–∞—Å–æ–≤
    reminder_interval_seconds = NODE_REMINDER_INTERVAL * 60  # –º–∏–Ω—É—Ç—ã * 60 = —Å–µ–∫—É–Ω–¥—ã
    
    for node in nodes:
        node_id = node.get("id")
        if not node_id:
            continue
            
        current_status = node.get("status")
        
        if current_status != "connected":
            last_notified = await get_node_last_notified(node_id)
            
            if last_notified is None or (current_time - last_notified) > reminder_interval_seconds:
                node_name = node.get("name") or node.get("address") or f"Node {node_id}"
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                down_time = await get_node_down_time(node_id)
                total_downtime = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                if down_time:
                    downtime_seconds = current_time - down_time
                    total_downtime = format_downtime(downtime_seconds)
                
                # –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
                minutes_since_notify = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if last_notified:
                    minutes = (current_time - last_notified) / 60  # —Ç–µ–ø–µ—Ä—å –≤ –º–∏–Ω—É—Ç–∞—Ö
                    minutes_since_notify = f"{minutes:.1f}"
                    
                message = f"‚ö†Ô∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –ù–æ–¥–∞ {node_name} –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π\n"
                message += f"–û–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–∞–ª–∞: {total_downtime}\n"
                message += f"–°—Ç–∞—Ç—É—Å: {current_status}"
                
                await send_telegram_message(message)
                await set_node_last_notified(node_id)

async def process_notifications(nodes, is_first_run=False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–¥"""
    if not TELEGRAM_ENABLED:
        return
        
    if not redis_client:
        if not await init_redis():
            return
            
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if is_first_run:
        await send_startup_notification(nodes)
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥
    await check_node_status_changes(nodes)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥–∞—Ö
    await check_offline_nodes_reminders(nodes)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥
    await check_nodes_changes(nodes)